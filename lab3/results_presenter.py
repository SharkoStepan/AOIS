from typing import Dict, List


class ResultsPresenter:
    def __init__(self):
        self.section_separator = "=" * 60
        self.subsection_separator = "-" * 40

    def format_comprehensive_results(self, minimization_results: Dict) -> Dict[str, str]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏"""
        output_lines = []

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        output_lines.append("–ê–ù–ê–õ–ò–ó –õ–û–ì–ò–ß–ï–°–ö–û–ô –§–£–ù–ö–¶–ò–ò")
        output_lines.append(self.section_separator)

        # –¢–ê–ë–õ–ò–¶–ê –ò–°–¢–ò–ù–ù–û–°–¢–ò
        if "truth_table_display" in minimization_results:
            output_lines.extend(self._format_truth_table(minimization_results))
            output_lines.append(self.subsection_separator)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ—É–Ω–∫—Ü–∏–∏
        output_lines.extend(self._format_function_info(minimization_results))
        output_lines.append(self.subsection_separator)

        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –°–î–ù–§
        output_lines.extend(self._format_sdnf_results(minimization_results))
        output_lines.append(self.subsection_separator)

        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –°–ö–ù–§
        output_lines.extend(self._format_sknf_results(minimization_results))
        output_lines.append(self.section_separator)

        formatted_output = "\n".join(output_lines)

        return {
            "formatted_output": formatted_output,
            "raw_data": minimization_results
        }

    def _format_truth_table(self, results: Dict) -> List[str]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏—Å—Ç–∏–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞"""
        if "truth_table_display" not in results:
            return []

        table_lines = ["üìã –¢–ê–ë–õ–ò–¶–ê –ò–°–¢–ò–ù–ù–û–°–¢–ò:"]
        table_lines.extend(results["truth_table_display"])
        return table_lines

    def _format_function_info(self, results: Dict) -> List[str]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–æ–≥–∏—á–µ—Å–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–∏"""
        info_lines = [
            "üìä –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –§–£–ù–ö–¶–ò–ò:",
            f"–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(results['variables'])}",
            f"–û–±—â–µ–µ —á–∏—Å–ª–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π: {results['truth_table_info']['total_rows']}",
            f"–ß–∏—Å–ª–æ –∏—Å—Ç–∏–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (–¥–ª—è –°–î–ù–§): {results['truth_table_info']['sdnf_count']}",
            f"–ß–∏—Å–ª–æ –ª–æ–∂–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (–¥–ª—è –°–ö–ù–§): {results['truth_table_info']['sknf_count']}"
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –°–î–ù–§ –∏ –°–ö–ù–§ –µ—Å–ª–∏ –µ—Å—Ç—å
        if "minterm_info" in results:
            info_lines.append(f"–°–î–ù–§: {results['minterm_info']['sdnf_expression']}")
            info_lines.append(f"–°–ö–ù–§: {results['minterm_info']['sknf_expression']}")

        return info_lines

    def _format_sdnf_results(self, results: Dict) -> List[str]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ –°–î–ù–§"""
        sdnf_lines = ["üéØ –ú–ò–ù–ò–ú–ò–ó–ê–¶–ò–Ø –°–î–ù–§:"]

        for method_name, method_data in results['sdnf_results'].items():
            sdnf_lines.extend([
                f"‚ñ∏ {method_data['method_description']}:",
                f"  –†–µ–∑—É–ª—å—Ç–∞—Ç: {method_data['expression']}",
                f"  –≠—Ç–∞–ø—ã: {len(method_data['stages'])} —ç—Ç–∞–ø–æ–≤"
            ])

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π —ç—Ç–∞–ø–æ–≤ (—Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 —ç—Ç–∞–ø–∞ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏)
            for i, stage in enumerate(method_data['stages'][:3], 1):
                stage_text = "; ".join(stage) if isinstance(stage, list) else str(stage)
                if len(stage_text) <= 100:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –≤—ã–≤–æ–¥–∞
                    sdnf_lines.append(f"    –≠—Ç–∞–ø {i}: {stage_text}")

            sdnf_lines.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –º–µ—Ç–æ–¥–∞–º–∏

        return sdnf_lines

    def _format_sknf_results(self, results: Dict) -> List[str]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ –°–ö–ù–§"""
        sknf_lines = ["üéØ –ú–ò–ù–ò–ú–ò–ó–ê–¶–ò–Ø –°–ö–ù–§:"]

        for method_name, method_data in results['sknf_results'].items():
            sknf_lines.extend([
                f"‚ñ∏ {method_data['method_description']}:",
                f"  –†–µ–∑—É–ª—å—Ç–∞—Ç: {method_data['expression']}",
                f"  –≠—Ç–∞–ø—ã: {len(method_data['stages'])} —ç—Ç–∞–ø–æ–≤"
            ])

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π —ç—Ç–∞–ø–æ–≤
            for i, stage in enumerate(method_data['stages'][:3], 1):
                stage_text = "; ".join(stage) if isinstance(stage, list) else str(stage)
                if len(stage_text) <= 100:
                    sknf_lines.append(f"    –≠—Ç–∞–ø {i}: {stage_text}")

            sknf_lines.append("")
        return sknf_lines

    def format_error_message(self, error_data: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        error_type = error_data.get('type', 'UNKNOWN_ERROR')
        message = error_data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')

        error_messages = {
            'SYNTAX_ERROR': f"–°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {message}",
            'VALIDATION_ERROR': f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {message}",
            'EVALUATION_ERROR': f"–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è: {message}",
            'UNKNOWN_ERROR': f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {message}"
        }

        return error_messages.get(error_type, f"–û—à–∏–±–∫–∞: {message}")